# trading_utils.py
import time
from config import *
from trading_utils  import *
from datetime import datetime, timedelta
from telegram_send_logs import notify_async


def monitor_and_update_stop(session, symbol, action, total_size, tp_profits, prcents, stoploss_fist, market_order_id, entry_time, NOW_LEVERAGE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å—Ç–æ—Ä–æ–Ω—É: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–∞ Buy (–ª–æ–Ω–≥), –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Sell; –µ—Å–ª–∏ Sell ‚Äî —Ç–æ Buy.
    start_ms = int(entry_time.timestamp() * 1000)
    ostatok = 0
    closing_side = "Sell" if action == "Buy" else "Buy"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (entry price)
    pos_data = session.get_open_orders(category="linear", symbol=symbol, order_id=market_order_id)
    if "result" in pos_data:
        try:
            entry_price = float(pos_data["result"]["list"][0]["lastPriceOnCreated"])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞:", e)
            entry_price = None
        print("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (–ë–ï):", entry_price)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
        entry_price = None
    
    if entry_price is None:
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    first_qty = round((total_size * (prcents[0]/100)), 0)
    #first_take_profit = tp_profits[0]
    
    if str(action) == 'Buy':
        first_take_profit = float(tp_profits[0]) * (1 - ((new_take_profit/NOW_LEVERAGE)/100))
    elif str(action) == 'Sell':
        first_take_profit = float(tp_profits[0]) * (((new_take_profit/NOW_LEVERAGE)/100) + 1)
    else:
        first_take_profit = tp_profits[0]
        
    print("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:", first_take_profit)
    notify_async(f'{symbol}\nEntry price: {entry_price}\nNew take profit: {first_take_profit}')

    # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ 50% –ø–æ–∑–∏—Ü–∏–∏ —Å reduceOnly=True, –∏—Å–ø–æ–ª—å–∑—É—è closing_side
    first_order_data = {
        "category": "linear",
        "symbol": symbol,
        "side": closing_side,       # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é closing_side
        "orderType": "Limit",
        "qty": first_qty,
        "price": first_take_profit,
        "timeInForce": "GTC",
        "reduceOnly": True,
        "positionIdx": 0
    }

    print(f"–†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {prcents[0]}% –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ:", first_take_profit)
    first_limit_order_response = session.place_order(**first_order_data)
    print("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", first_limit_order_response)
    first_limit_order_id = first_limit_order_response["result"]["orderId"]
    
    
    
    
        
    second_qty = round((total_size * (prcents[1]/100)), 0)
    second_take_profit = tp_profits[1]
    print("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:", second_take_profit)

    # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ 50% –ø–æ–∑–∏—Ü–∏–∏ —Å reduceOnly=True, –∏—Å–ø–æ–ª—å–∑—É—è closing_side
    second_order_data = {
        "category": "linear",
        "symbol": symbol,
        "side": closing_side,       # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é closing_side
        "orderType": "Limit",
        "qty": second_qty,
        "price": second_take_profit,
        "timeInForce": "GTC",
        "reduceOnly": True,
        "positionIdx": 0
    }

    print(f"–†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {prcents[1]}% –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ:", second_take_profit)
    second_limit_order_response = session.place_order(**second_order_data)
    print("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", second_limit_order_response)
    second_limit_order_id = second_limit_order_response["result"]["orderId"]
    
    
    
    
        
    third_qty = round((total_size * (prcents[2]/100)), 0)
    third_take_profit = tp_profits[2]
    print("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:", third_take_profit)

    # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ 50% –ø–æ–∑–∏—Ü–∏–∏ —Å reduceOnly=True, –∏—Å–ø–æ–ª—å–∑—É—è closing_side
    third_order_data = {
        "category": "linear",
        "symbol": symbol,
        "side": closing_side,       # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é closing_side
        "orderType": "Limit",
        "qty": third_qty,
        "price": third_take_profit,
        "timeInForce": "GTC",
        "reduceOnly": True,
        "positionIdx": 0
    }

    print(f"–†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {prcents[2]}% –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ:", second_take_profit)
    third_limit_order_response = session.place_order(**third_order_data)
    print("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", third_limit_order_response)
    third_limit_order_id = third_limit_order_response["result"]["orderId"]
    
    
    
    
    
    # –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    while True:
        _, size_cur, avg_price = current_position_bybit(session, symbol)
        if size_cur == 0:
            notify_async(f'{symbol} Stop loss üõë (-{main_stoploss}%)')
            ostatok = size_cur
            break
        elif size_cur <= max(0, total_size - first_qty * 0.99):
            notify_async(f'{symbol} First take profit üü¢ (+40%)')
            ostatok = size_cur
            break
        time.sleep(1)
        
    
    if str(action) == 'Buy':
        newstoploss = float(entry_price) * (((stoploss_fist/NOW_LEVERAGE)/100) + 1)
    elif str(action) == 'Sell':
        newstoploss = float(entry_price) * (1 - ((stoploss_fist/NOW_LEVERAGE)/100))
    else:
        newstoploss = float(entry_price)
        
    first_stop_resp = session.set_trading_stop(
        category="linear",
        symbol=symbol,
        side=action,
        stopLoss=newstoploss,
        positionIdx=0
    )
    print("–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω:", first_stop_resp)
    notify_async(f'{symbol} üõë Stop loss moved to level: {newstoploss}')
    # try:
    #     first_exit_time = datetime.utcnow()
    #     first_end_ms = int(first_exit_time.timestamp() * 1000)
    #     first_pnl = get_closed_pnl(session, symbol, start_ms, first_end_ms)
    #     for d in first_pnl:
    #         first_pnl_formated = f"[{d['symbol']}] –ó–∞–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {d['orderId']} | PNL: {d['closedPnl']} | Side: {d['side']} | Entry: {d['avgEntryPrice']} ‚Üí Exit: {d['avgExitPrice']}"
    #     notify_async(first_pnl_formated)
    # except:
    #     print('First get pnl error')

    
    
    # –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    while True:
        _, size_cur, avg_price = current_position_bybit(session, symbol)
        if size_cur == 0:
            notify_async(f'{symbol} Stop loss üõë (+{stoploss_fist}%)')
            ostatok = size_cur
            break
        elif size_cur <= max(0, ostatok - second_qty * 0.99):
            notify_async(f'{symbol} Second take profit üü¢ (+60%)')
            ostatok = size_cur
            break
        time.sleep(1)
        
        
    second_stop_resp = session.set_trading_stop(
        category="linear",
        symbol=symbol,
        side=action,
        stopLoss=first_take_profit,
        positionIdx=0
    )
    print("–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω:", second_stop_resp)
    notify_async(f'{symbol} üõë Stop loss moved to level: {first_take_profit}')
    # try:
    #     second_exit_time = datetime.utcnow()
    #     second_end_ms = int(second_exit_time.timestamp() * 1000)
    #     second_pnl = get_closed_pnl(session, symbol, start_ms, second_end_ms)
    #     for d in second_pnl:
    #         second_pnl_formated = f"[{d['symbol']}] –ó–∞–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {d['orderId']} | PNL: {d['closedPnl']} | Side: {d['side']} | Entry: {d['avgEntryPrice']} ‚Üí Exit: {d['avgExitPrice']}"
    #     notify_async(second_pnl_formated)
    # except:
    #     print('Second get pnl error')
    
    
    
    
    
    # –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    while True:
        _, size_cur, avg_price = current_position_bybit(session, symbol)
        if size_cur == 0:
            notify_async(f'{symbol} Stop loss üõë (+38%)')
            ostatok = size_cur
            break
        elif size_cur <= max(0, ostatok - third_qty * 0.99):
            notify_async(f'{symbol} Third take profit üü¢ (+80%)')
            ostatok = size_cur
            break
        time.sleep(1)
    
    
    third_stop_resp = session.set_trading_stop(
        category="linear",
        symbol=symbol,
        side=action,
        stopLoss=second_take_profit,
        positionIdx=0
    )
    print("–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω:", third_stop_resp)
    notify_async(f'{symbol} üõë Stop loss moved to level: {second_take_profit}')
    # try:
    #     third_exit_time = datetime.utcnow()
    #     third_end_ms = int(third_exit_time.timestamp() * 1000)
    #     third_pnl = get_closed_pnl(session, symbol, start_ms, third_end_ms)
    #     for d in third_pnl:
    #         third_pnl_formated = f"[{d['symbol']}] –ó–∞–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {d['orderId']} | PNL: {d['closedPnl']} | Side: {d['side']} | Entry: {d['avgEntryPrice']} ‚Üí Exit: {d['avgExitPrice']}"
    #     notify_async(third_pnl_formated)
    # except:
    #     print('Third get pnl error')
    
    
    
    
if __name__ == '__main__':
    session = HTTP(demo=True, api_key=API_KEY, api_secret=API_SECRET)
    symbol = 'VELODROMEUSDT'
    total_size = 45000
    action = 'Buy'
    NOW_LEVERAGE = 20
    market_order_id = ''
    first_take_profit = 0.05663
    second_take_profit = 0.05724
    first_qty = 31500
    second_qty = 9000
    third_qty = 4275
    
    pos_data = session.get_open_orders(category="linear", symbol=symbol, order_id=market_order_id)
    if "result" in pos_data:
        try:
            entry_price = float(pos_data["result"]["list"][0]["lastPriceOnCreated"])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞:", e)
            entry_price = None
        print("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (–ë–ï):", entry_price)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
        entry_price = None
    
    while True:
        _, size_cur, avg_price = current_position_bybit(session, symbol)
        #print(size_cur)
        if size_cur == 0:
            notify_async(f'{symbol} –°—Ç–æ–ø –ª–æ—Å—Å ‚ùå (-20%)')
            ostatok = size_cur
            break
        elif size_cur <= max(0, total_size - first_qty * 0.99):
            notify_async(f'{symbol} –ü–µ—Ä—ã–π —Ç–µ–π–∫ ‚úÖ (+40%)')
            ostatok = size_cur
            break
        time.sleep(1)
        
    
    if str(action) == 'Buy':
        newstoploss = float(entry_price) * (((stoploss_fist/NOW_LEVERAGE)/100) + 1)
    elif str(action) == 'Sell':
        newstoploss = float(entry_price) * (1 - ((stoploss_fist/NOW_LEVERAGE)/100))
    else:
        newstoploss = float(entry_price)
        
    first_stop_resp = session.set_trading_stop(
        category="linear",
        symbol=symbol,
        side=action,
        stopLoss=newstoploss,
        positionIdx=0
    )
    print("–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω:", first_stop_resp)
    notify_async(f'{symbol} –°—Ç–æ–ø –ª–æ—Å—Å –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: {newstoploss}')
    
    
    while True:
        _, size_cur, avg_price = current_position_bybit(session, symbol)
        print(size_cur)
        if size_cur == 0:
            notify_async(f'{symbol} –°—Ç–æ–ø –ª–æ—Å—Å ‚ùå (+{stoploss_fist}%)')
            ostatok = size_cur
            break
        elif size_cur <= max(0, ostatok - second_qty * 0.99):
            notify_async(f'{symbol} –í—Ç–æ—Ä–æ–π —Ç–µ–π–∫ ‚úÖ (+60%)')
            ostatok = size_cur
            break
        time.sleep(1)
        
        
    second_stop_resp = session.set_trading_stop(
        category="linear",
        symbol=symbol,
        side=action,
        stopLoss=first_take_profit,
        positionIdx=0
    )
    print("–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω:", second_stop_resp)
    notify_async(f'{symbol} –°—Ç–æ–ø –ª–æ—Å—Å –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: {newstoploss}')


    while True:
        _, size_cur, avg_price = current_position_bybit(session, symbol)
        print(size_cur)
        if size_cur == 0:
            notify_async(f'{symbol} –°—Ç–æ–ø –ª–æ—Å—Å ‚ùå (+{first_take_profit}%)')
            ostatok = size_cur
            break
        elif size_cur <= max(0, ostatok - third_qty * 0.99):
            notify_async(f'{symbol} –¢—Ä–µ—Ç–∏–π —Ç–µ–π–∫ ‚úÖ (+80%)')
            ostatok = size_cur
            break
        time.sleep(1)
    
    
    third_stop_resp = session.set_trading_stop(
        category="linear",
        symbol=symbol,
        side=action,
        stopLoss=second_take_profit,
        positionIdx=0
    )
    print("–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω:", third_stop_resp)
    notify_async(f'{symbol} –°—Ç–æ–ø –ª–æ—Å—Å –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: {newstoploss}')
